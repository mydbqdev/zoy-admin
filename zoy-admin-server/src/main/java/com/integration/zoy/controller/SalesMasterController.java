package com.integration.zoy.controller;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.TimeZone;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.DataAccessException;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.google.gson.FieldNamingPolicy;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializer;
import com.integration.zoy.entity.AdminUserPasswordHistory;
import com.integration.zoy.entity.ZoyPgSalesMaster;
import com.integration.zoy.entity.ZoyPgSalesUserLoginDetails;
import com.integration.zoy.model.ZoyPgSalesMasterModel;
import com.integration.zoy.repository.AdminUserPasswordHistoryRepository;
import com.integration.zoy.service.PasswordDecoder;
import com.integration.zoy.service.SalesDBImpl;
import com.integration.zoy.service.ZoyCodeGenerationService;
import com.integration.zoy.utils.AuditHistoryUtilities;
import com.integration.zoy.utils.PaginationRequest;
import com.integration.zoy.utils.ResponseBody;

@RestController
@RequestMapping("")
public class SalesMasterController implements SalesMasterImpl {

	private static final Logger log = LoggerFactory.getLogger(ZoyAdminMasterController.class);
	private static final Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd HH:mm:ss")
			.registerTypeAdapter(Timestamp.class, (JsonSerializer<Timestamp>) (src, typeOfSrc, context) -> {
				SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				dateFormat.setTimeZone(TimeZone.getTimeZone("Asia/Kolkata"));
				return new JsonPrimitive(dateFormat.format(src));
			}).registerTypeAdapter(Timestamp.class, (JsonDeserializer<Timestamp>) (json, typeOfT, context) -> {
				try {
					SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
					dateFormat.setTimeZone(TimeZone.getTimeZone("Asia/Kolkata"));
					return new Timestamp(dateFormat.parse(json.getAsString()).getTime());
				} catch (Exception e) {
					throw new JsonParseException("Failed to parse Timestamp", e);
				}
			}).setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES).create();

	private static final Gson gson2 = new GsonBuilder()
			.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES).create();

	@Autowired
	SalesDBImpl salesDBImpl;

	@Autowired
	ZoyCodeGenerationService passwordGeneration;

	@Autowired
	PasswordDecoder passwordDecoder;

	@Autowired
	AuditHistoryUtilities auditHistoryUtilities;

	@Autowired
	AdminUserPasswordHistoryRepository adminUserPasswordHistoryRepo;

	@Value("${spring.jackson.time-zone}")
	private String currentTimeZone;

	@Override
	public ResponseEntity<String> zoyAdminSalesCreateUser(ZoyPgSalesMasterModel pgSalesMasterModel) {
		ResponseBody response = new ResponseBody();
		try {
			if (salesDBImpl.existsByUserEmail(pgSalesMasterModel.getEmailId())) {
				response.setStatus(HttpStatus.CONFLICT.value());
				response.setError("User already exists with this email");
				return new ResponseEntity<>(gson.toJson(response), HttpStatus.CONFLICT);
			}
			ZoyPgSalesMaster master = new ZoyPgSalesMaster();
			master.setFirstName(pgSalesMasterModel.getFirstName());
			master.setLastName(pgSalesMasterModel.getLastName());
			master.setMiddleName(pgSalesMasterModel.getMiddleName());
			master.setEmployeeId(pgSalesMasterModel.getEmployeeId());
			master.setMobileNo(pgSalesMasterModel.getMobileNo());
			master.setEmailId(pgSalesMasterModel.getEmailId());
			master.setStatus(true);
			salesDBImpl.saveAdminSalesUser(master);

			String autoGeneratedPassword = passwordGeneration.autoGeneratePassword(pgSalesMasterModel.getFirstName());

			ZoyPgSalesUserLoginDetails adminSalesUserLoginDetails = new ZoyPgSalesUserLoginDetails();
			adminSalesUserLoginDetails.setUserEmail(pgSalesMasterModel.getEmailId());
			adminSalesUserLoginDetails.setPassword(new BCryptPasswordEncoder().encode(autoGeneratedPassword));
			adminSalesUserLoginDetails.setIsActive(true);
			adminSalesUserLoginDetails.setIsLock(false);

			TimeZone timeZone = TimeZone.getTimeZone(currentTimeZone);
			Calendar calendar = Calendar.getInstance(timeZone);
			long currentTimeMillis = calendar.getTimeInMillis();
			Timestamp currentTimestamp = new Timestamp(currentTimeMillis);
			adminSalesUserLoginDetails.setLastChangeOn(currentTimestamp);

			salesDBImpl.saveAdminLoginDetails(adminSalesUserLoginDetails);

			AdminUserPasswordHistory newPasswordHistory = new AdminUserPasswordHistory();
			newPasswordHistory.setUserEmail(pgSalesMasterModel.getEmailId());
			newPasswordHistory.setPassword(adminSalesUserLoginDetails.getPassword());
			adminUserPasswordHistoryRepo.save(newPasswordHistory);
			// audit here
//			auditHistoryUtilities.auditForCreateSalesUserDelete(SecurityContextHolder.getContext().getAuthentication().getName(), true, master);
			response.setStatus(HttpStatus.OK.value());
			response.setMessage("sales User created Successfully");
			return new ResponseEntity<>(gson.toJson(response), HttpStatus.OK);
		} catch (Exception e) {
			log.error("Error getting sales users details  API:/zoy_admin/zoyAdminSalesCreateUser", e);
			response.setStatus(HttpStatus.BAD_REQUEST.value());
			response.setError(e.getMessage());
			return new ResponseEntity<>(gson.toJson(response), HttpStatus.BAD_REQUEST);
		}
	}

	@Override
	public ResponseEntity<String> getzoyPgSalesUsersDetails(PaginationRequest paginationRequest) {
		ResponseBody response = new ResponseBody();
		try {
			Page<ZoyPgSalesMasterModel> ownerPropertyList = salesDBImpl.findAllSalesUsers( paginationRequest);
			return new ResponseEntity<>(gson2.toJson(ownerPropertyList), HttpStatus.OK);
		}catch (DataAccessException dae) {
			log.error("Database error occurred while fetching owner details: " + dae.getMessage(), dae);
			response.setStatus(HttpStatus.BAD_REQUEST.value());
			response.setError("Database error: Unable to fetch owner details");
			return new ResponseEntity<>(gson.toJson(response), HttpStatus.BAD_REQUEST);

		}catch (Exception e) {
			log.error("Unexpected error occurredAPI:/zoy_admin/manage-owners.zoyPgOwnerDetails", e);
			response.setStatus(HttpStatus.BAD_REQUEST.value());
			response.setError(e.getMessage());
			return new ResponseEntity<>(gson.toJson(response), HttpStatus.BAD_REQUEST);
		}
	}

}
